<svg xmlns="http://www.w3.org/2000/svg" width="480" height="988" class="">
    <defs>
        <style/>
    </defs>
    <style>@keyframes animation-gauge{0%{stroke-dasharray:0 329}}@keyframes animation-rainbow{0%,to{color:#7f00ff;fill:#7f00ff}14%{color:#a933ff;fill:#a933ff}29%{color:#007fff;fill:#007fff}43%{color:#00ff7f;fill:#00ff7f}57%{color:#ff0;fill:#ff0}71%{color:#ff7f00;fill:#ff7f00}86%{color:red;fill:red}}svg{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;font-size:14px;color:#777}h2{margin:8px 0 2px;padding:0;color:#0366d6;font-weight:400;font-size:16px}h2 svg{fill:currentColor}section&gt;.field{margin-left:5px;margin-right:5px}.field{display:flex;align-items:center;margin-bottom:2px;white-space:nowrap}.field svg{margin:0 8px;fill:#959da5;flex-shrink:0}.field.error{color:#cb2431}.field.error svg{fill:#cb2431}.row{display:flex;flex-wrap:wrap}.row section{flex:1 1 0}#metrics-end,.fill-width{width:100%}.chartist .ct-post{fill:rgba(127,127,127,.8)!important;color:rgba(127,127,127,.8)!important;font-size:9px;text-anchor:middle}.activity{margin-bottom:12px}.activity .field{width:100%;overflow:hidden;text-overflow:ellipsis;max-width:450px;white-space:nowrap;margin-bottom:0}.activity .field .content{flex-grow:1;text-overflow:ellipsis;overflow:hidden}.activity .issue,.activity .repo{display:inline;color:#58a6ff}.activity .code,code,span.code{background-color:#7777771f;border-radius:6px;color:#777;padding:1px 5px;font-size:80%;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace}.activity .code,span.code{margin:0 4px -3px}.activity .details,.activity .timestamp{padding-left:38px;display:flex;flex-direction:column;font-size:13px;color:#666}.activity .timestamp{font-size:10px;margin-top:4px}.activity .details&gt;.comment{overflow:hidden;text-overflow:ellipsis;display:block;width:420px;margin-top:6px;border-left:3px solid #777777b2;padding-left:6px;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical}code{display:inline-block}code[class^=language-]{white-space:pre-wrap;width:97%;margin-top:4px}.token.comment{color:#690}.token.punctuation{color:#8a93a8}.token.keyword,.token.namespace{color:#b44418}.token.char,.token.number{color:#2777aa}.token.operator{color:#106cbc}.token.trimmed{font-style:italic;color:#77777760}.space{margin-left:7px}:root{--color-calendar-graph-day-bg:#ebedf0;--color-calendar-graph-day-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-bg:#9be9a8;--color-calendar-graph-day-L2-bg:#40c463;--color-calendar-graph-day-L3-bg:#30a14e;--color-calendar-graph-day-L4-bg:#216e39;--color-calendar-halloween-graph-day-L1-bg:#ffee4a;--color-calendar-halloween-graph-day-L2-bg:#ffc501;--color-calendar-halloween-graph-day-L3-bg:#fe9600;--color-calendar-halloween-graph-day-L4-bg:#03001c;--color-calendar-graph-day-L4-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L3-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L2-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-border:rgba(27,31,35,0.06)}</style>
    <style/>
    <foreignObject x="0" y="0" width="100%" height="100%">
        <div xmlns="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" class="items-wrapper">
            <section>
                <h2 class="field">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                        <path fill-rule="evenodd" d="M0 8a8 8 0 1116 0v5.25a.75.75 0 01-1.5 0V8a6.5 6.5 0 10-13 0v5.25a.75.75 0 01-1.5 0V8zm5.5 4.25a.75.75 0 01.75-.75h3.5a.75.75 0 010 1.5h-3.5a.75.75 0 01-.75-.75zM3 6.75C3 5.784 3.784 5 4.75 5h6.5c.966 0 1.75.784 1.75 1.75v1.5A1.75 1.75 0 0111.25 10h-6.5A1.75 1.75 0 013 8.25v-1.5zm1.47-.53a.75.75 0 011.06 0l.97.97.97-.97a.75.75 0 011.06 0l.97.97.97-.97a.75.75 0 111.06 1.06l-1.5 1.5a.75.75 0 01-1.06 0L8 7.81l-.97.97a.75.75 0 01-1.06 0l-1.5-1.5a.75.75 0 010-1.06z"/>
                    </svg>
                    Recent activity
                </h2>
                <div class="row">
                    <section>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M1.5 2.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v8.5a.25.25 0 01-.25.25h-6.5a.75.75 0 00-.53.22L4.5 14.44v-2.19a.75.75 0 00-.75-.75h-2a.25.25 0 01-.25-.25v-8.5zM1.75 1A1.75 1.75 0 000 2.75v8.5C0 12.216.784 13 1.75 13H3v1.543a1.457 1.457 0 002.487 1.03L8.061 13h6.189A1.75 1.75 0 0016 11.25v-8.5A1.75 1.75 0 0014.25 1H1.75zm5.03 3.47a.75.75 0 010 1.06L5.31 7l1.47 1.47a.75.75 0 01-1.06 1.06l-2-2a.75.75 0 010-1.06l2-2a.75.75 0 011.06 0zm2.44 0a.75.75 0 000 1.06L10.69 7 9.22 8.47a.75.75 0 001.06 1.06l2-2a.75.75 0 000-1.06l-2-2a.75.75 0 00-1.06 0z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#4122 Add built-in `breakpoint` function</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by jopemachine in <span class="repo">RustPython/RustPython</span></div>
                                    <div class="comment">
                                        I think the error handling logic here is printing warning log and returning
                                        <code>vm.ctx.none</code>
                                        , so I think maybe error propagating can not be used here.
I'm trying to find good way to reduce indents, how about one?
                                        <code class="language-multiline language-rust" xml:space="preserve"><span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token keyword">match</span> envar<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> last<span class="token punctuation">,</span>
<span class="token trimmed">(25 more lines were trimmed)</span></code>
                                    </div>
                                </div>
                                <div class="timestamp">23 Aug 2022, 13:50:19</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"/>
                                    </svg>
                                    <div class="content">
                                        Reviewed
                                        <span class="issue">#4122 Add built-in `breakpoint` function</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened  in <span class="repo">RustPython/RustPython</span></div>
                                </div>
                                <div class="timestamp">23 Aug 2022, 13:50:20</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M7.177 3.073L9.573.677A.25.25 0 0110 .854v4.792a.25.25 0 01-.427.177L7.177 3.427a.25.25 0 010-.354zM3.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.25.75a2.25 2.25 0 113 2.122v5.256a2.251 2.251 0 11-1.5 0V5.372A2.25 2.25 0 011.5 3.25zM11 2.5h-1V4h1a1 1 0 011 1v5.628a2.251 2.251 0 101.5 0V5A2.5 2.5 0 0011 2.5zm1 10.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zM3.75 12a.75.75 0 100 1.5.75.75 0 000-1.5z"/>
                                    </svg>
                                    <div class="content">
                                        Opened
                                        <span class="issue">#4122 Add built-in `breakpoint` function</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div> in <span class="repo">RustPython/RustPython</span></div>
                                    <div>2 files changed <span class="code">++96 --3</span></div>
                                </div>
                                <div class="timestamp">22 Aug 2022, 17:34:07</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.75 2.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 01.75.75v2.19l2.72-2.72a.75.75 0 01.53-.22h4.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25H2.75zM1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0113.25 12H9.06l-2.573 2.573A1.457 1.457 0 014 13.543V12H2.75A1.75 1.75 0 011 10.25v-7.5z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#1793 Add `prefer-error-cause` rule</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by jopemachine in <span class="repo">sindresorhus/eslint-plugin-unicorn</span></div>
                                    <div class="comment">
                                        <i>Failing: sindresorhus/eslint-plugin-unicorn/runs/7158388862?check_suite_focus=true</i>
                                        I'm trying to resolve this issue, but I'm not sure how to handle this.
CI failed because
                                        <code>run-rules-on-codebase</code>
                                        test include
                                        <code>prefer-error-cause</code>
                                        rule when checking
                                        <code>intergration/test.mjs</code>
                                        file.
But when I added
                                        <code>eslint-disable</code>
                                        comment on the
                                        <code>intergration/test.mjs</code>
                                        's failed lines, it cause lint error due to eslint can not find
                                        <code>prefer-error-cause</code>
                                        rule.
                                    </div>
                                </div>
                                <div class="timestamp">14 Aug 2022, 16:15:45</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M1.5 2.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v8.5a.25.25 0 01-.25.25h-6.5a.75.75 0 00-.53.22L4.5 14.44v-2.19a.75.75 0 00-.75-.75h-2a.25.25 0 01-.25-.25v-8.5zM1.75 1A1.75 1.75 0 000 2.75v8.5C0 12.216.784 13 1.75 13H3v1.543a1.457 1.457 0 002.487 1.03L8.061 13h6.189A1.75 1.75 0 0016 11.25v-8.5A1.75 1.75 0 0014.25 1H1.75zm5.03 3.47a.75.75 0 010 1.06L5.31 7l1.47 1.47a.75.75 0 01-1.06 1.06l-2-2a.75.75 0 010-1.06l2-2a.75.75 0 011.06 0zm2.44 0a.75.75 0 000 1.06L10.69 7 9.22 8.47a.75.75 0 001.06 1.06l2-2a.75.75 0 000-1.06l-2-2a.75.75 0 00-1.06 0z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#1793 Add `prefer-error-cause` rule</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by jopemachine in <span class="repo">sindresorhus/eslint-plugin-unicorn</span></div>
                                    <div class="comment">
                                        I think this is resolved now if I understand correctly.
I replaced existing
                                        <code>getMatchingAncestorOfType</code>
                                        call with
                                        <code>getCatchBlock</code>
                                        for resolving (1).
And I used
                                        <code>esquery</code>
                                        in the
                                        <code>getCatchBlock</code>
                                        for implementing for checking if the function is
                                        <code>{then, catch}</code>
                                        's argument (2).
And
                                        <code>getCatchBlock</code>
                                        return undefined if the throw statement is in the function to avoid existing wrong fix. (Fixing throw statement in the
                                        <code>function foo</code>
                                        in your example code)
                                    </div>
                                </div>
                                <div class="timestamp">14 Aug 2022, 16:11:28</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"/>
                                    </svg>
                                    <div class="content">
                                        Reviewed
                                        <span class="issue">#1793 Add `prefer-error-cause` rule</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened  in <span class="repo">sindresorhus/eslint-plugin-unicorn</span></div>
                                </div>
                                <div class="timestamp">14 Aug 2022, 16:11:29</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.75 2.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 01.75.75v2.19l2.72-2.72a.75.75 0 01.53-.22h4.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25H2.75zM1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0113.25 12H9.06l-2.573 2.573A1.457 1.457 0 014 13.543V12H2.75A1.75 1.75 0 011 10.25v-7.5z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#24 Expose all timeout options (custom `message`, `customTimers`)</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by jopemachine in <span class="repo">sindresorhus/p-wait-for</span></div>
                                    <div class="comment">@fregante
I appreciate you pointing them out.
I agree with all the points you made.
I should have been look into the code after the p-timeout API change although there are also unrelated some mistakes.</div>
                                </div>
                                <div class="timestamp">28 Jul 2022, 20:50:55</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.75 2.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 01.75.75v2.19l2.72-2.72a.75.75 0 01.53-.22h4.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25H2.75zM1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0113.25 12H9.06l-2.573 2.573A1.457 1.457 0 014 13.543V12H2.75A1.75 1.75 0 011 10.25v-7.5z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#3979 Fix `PyFloat::py_new` always returning new float object issue</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by jopemachine in <span class="repo">RustPython/RustPython</span></div>
                                    <div class="comment">
                                        <i>
                                            We need to move the exact float type check into
                                            <code>PyNumber::float</code>
                                            and return its
                                            <code>payload</code>
                                            with ref. Please refer to what
                                            <code>payload_if_exact</code>
                                            return and use
                                            <code>into_ref</code>
                                            😊
                                        </i>
                                        <code>number::float</code>
                                        is not called when the argument is
                                        <code>math.nan</code>
                                        because
                                        <code>try_float_opt</code>
                                        early returned in this line.
So I tried to edit
                                        <code>try_float_opt</code>
                                        instead like below, but it seems it is not working as expected. (
                                        <code>id(float(math.nan))</code>
                                        prints different oid each time)
                                        <code class="language-multiline language-rust" xml:space="preserve"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">try_float_opt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> vm<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">VirtualMachine</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">PyResult</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token namespace">payload_if_exact<span class="token punctuation">::</span></span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token trimmed">(17 more lines were trimmed)</span></code>
                                        I guess this is because below line returned new float instance instead of existing one.
https://github.com/RustPython/RustPython/blob/main/vm/src/builtins/float.rs#L152-L154
So, I think maybe we need to update the
                                        <code>py_new</code>
                                        function somehow.
                                    </div>
                                </div>
                                <div class="timestamp">28 Jul 2022, 17:23:32</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.75 2.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 01.75.75v2.19l2.72-2.72a.75.75 0 01.53-.22h4.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25H2.75zM1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0113.25 12H9.06l-2.573 2.573A1.457 1.457 0 014 13.543V12H2.75A1.75 1.75 0 011 10.25v-7.5z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#3979 Fix `PyFloat::py_new` always returning new float object issue</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by jopemachine in <span class="repo">RustPython/RustPython</span></div>
                                    <div class="comment">
                                        <i>
                                            We need to move the exact float type check into
                                            <code>PyNumber::float</code>
                                            and return its
                                            <code>payload</code>
                                            with ref. Please refer to what
                                            <code>payload_if_exact</code>
                                            return and use
                                            <code>into_ref</code>
                                            😊
                                        </i>
                                        <code>number::float</code>
                                        is not called when the argument is
                                        <code>math.nan</code>
                                        because
                                        <code>try_float_opt</code>
                                        early returned in this line.
So I tried to edit
                                        <code>try_float_opt</code>
                                        instead like below, but it seems it is not working as expected. (
                                        <code>id(float(math.nan))</code>
                                        prints different oid each time)
                                        <code class="language-multiline language-rust" xml:space="preserve"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">try_float_opt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> vm<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">VirtualMachine</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">PyResult</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token namespace">payload_if_exact<span class="token punctuation">::</span></span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token trimmed">(17 more lines were trimmed)</span></code>
                                        I guess this is because below line returned new float instance instead of existing one.
https://github.com/RustPython/RustPython/blob/main/vm/src/builtins/float.rs#L152-L154
So, I think maybe we need to update the
                                        <code>py_new</code>
                                        function somehow.
                                    </div>
                                </div>
                                <div class="timestamp">28 Jul 2022, 17:23:26</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.75 2.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 01.75.75v2.19l2.72-2.72a.75.75 0 01.53-.22h4.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25H2.75zM1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0113.25 12H9.06l-2.573 2.573A1.457 1.457 0 014 13.543V12H2.75A1.75 1.75 0 011 10.25v-7.5z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#3978 `PyFloat::py_new` always return new float object even if the argument's oid is same.</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by jopemachine in <span class="repo">RustPython/RustPython</span></div>
                                    <div class="comment">
                                        I think returning same object when argument oid is same itself does not matter..
In cpython, unlike passing
                                        <code>math.nan</code>
                                        ,
                                        <code class="language-multiline" xml:space="preserve">&gt;&gt;&gt; a = float('nan')
&gt;&gt;&gt; b = float('nan')
<span class="token trimmed">(2 more lines were trimmed)</span></code>
                                        I guess 'nan''s oid is same with the two line, but because 'nan' is not exact float type,
                                        <code>a is b</code>
                                        is false
                                    </div>
                                </div>
                                <div class="timestamp">28 Jul 2022, 10:18:45</div>
                            </section>
                        </div>
                    </section>
                </div>
            </section>
        </div>
        <div xmlns="http://www.w3.org/1999/xhtml" id="metrics-end"></div>
    </foreignObject>
</svg>